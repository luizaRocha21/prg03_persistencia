/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba.curso.view;

/**
 *
 * @author luiza
 */

import br.com.ifba.curso.controller.CursoController;
import br.com.ifba.curso.entity.Curso;
import javax.swing.*;
import javax.swing.table.*;
import java.awt.Component;
import java.awt.event.*;
import java.util.List;
    
    /**
 * Tela de listagem de cursos com funcionalidades CRUD
 */
public class CursoListar extends javax.swing.JFrame {
    private final CursoController controller;
    
    public CursoListar(CursoController controller) {
        this.controller = controller;
        initComponents();
        configurarTabela();
        atualizarTabela();
        setLocationRelativeTo(null);
    }
    private void configurarTabela() {
        // Configura renderizador para os botões
        tabelaCursos.getColumn("Remover").setCellRenderer(new ButtonRenderer());
        tabelaCursos.getColumn("Editar").setCellRenderer(new ButtonRenderer());
        
        // Adiciona listener para os cliques na tabela
        tabelaCursos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int column = tabelaCursos.getColumnModel().getColumnIndexAtX(e.getX());
                int row = e.getY() / tabelaCursos.getRowHeight();
                
                if (row < 0 || row >= tabelaCursos.getRowCount()) return;
                
                if (column == 4) { // Coluna "Remover"
                    removerCurso(row);
                } else if (column == 5) { // Coluna "Editar"
                    editarCurso(row);
                }
            }
        });
    }
    
    /**
     * Atualiza os dados da tabela com os cursos do banco de dados
     */
    private void atualizarTabela() {
        DefaultTableModel model = (DefaultTableModel) tabelaCursos.getModel();
        model.setRowCount(0); // Limpa a tabela
        
        try {
            List<Curso> cursos = controller.listarTodosCursos();
            for (Curso curso : cursos) {
                model.addRow(new Object[]{
                    curso.getNome(),
                    curso.getCargaHoraria(),
                    curso.getDescricao(),
                    curso.getFornecedor(),
                    "✖ Remover",
                    "✎ Editar"
                });
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, 
                "Erro ao carregar cursos: " + ex.getMessage(), 
                "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaCursos = new javax.swing.JTable();
        tfPesquisar = new javax.swing.JTextField();
        btnNovo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabelaCursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Nome", "Quantidade", "Descrição", "Fornecedor", "Remover", "Editar"
            }
        ));
        tabelaCursos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tabelaCursosKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaCursos);

        tfPesquisar.setText("Pesquisar:");
        tfPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPesquisarActionPerformed(evt);
            }
        });

        btnNovo.setText("Adiconar Curso");
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(173, 173, 173)
                        .addComponent(btnNovo)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNovo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
       CursoCadastro dialog = new CursoCadastro(this, controller, null);
        dialog.setVisible(true);
        atualizarTabela();
    }//GEN-LAST:event_btnNovoActionPerformed

    private void tabelaCursosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelaCursosKeyPressed
    
    }//GEN-LAST:event_tabelaCursosKeyPressed

    private void tfPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPesquisarActionPerformed
        String termo = tfPesquisar.getText().trim();
        DefaultTableModel model = (DefaultTableModel) tabelaCursos.getModel();
        model.setRowCount(0);
        
        try {
            List<Curso> cursos = controller.buscarPorNome(termo);
            for (Curso curso : cursos) {
                model.addRow(new Object[]{
                    curso.getNome(),
                    curso.getCargaHoraria(),
                    curso.getDescricao(),
                    curso.getFornecedor(),
                    "✖ Remover",
                    "✎ Editar"
                });
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, 
                "Erro na busca: " + ex.getMessage(), 
                "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tfPesquisarActionPerformed
    /**
     * Abre diálogo para editar curso selecionado
     */
    private void editarCurso(int row) {
        try {
            String nome = (String) tabelaCursos.getValueAt(row, 0);
            List<Curso> cursos = controller.buscarPorNome(nome);
            if (!cursos.isEmpty()) {
                new CursoCadastro(this, controller, cursos.get(0)).setVisible(true);
                atualizarTabela();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, 
                "Erro ao editar curso: " + ex.getMessage(), 
                "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * Remove curso após confirmação
     */
    private void removerCurso(int row) {
        try {
            String nome = (String) tabelaCursos.getValueAt(row, 0);
            List<Curso> cursos = controller.buscarPorNome(nome);
            
            if (!cursos.isEmpty()) {
                int confirm = JOptionPane.showConfirmDialog(
                    this, 
                    "Deseja realmente excluir o curso " + nome + "?", 
                    "Confirmação", 
                    JOptionPane.YES_NO_OPTION);
                
                if (confirm == JOptionPane.YES_OPTION) {
                    controller.removerCurso(cursos.get(0));
                    atualizarTabela();
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, 
                "Erro ao remover curso: " + ex.getMessage(), 
                "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    private static class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setOpaque(true);
        }
        
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {
            setText((value == null) ? "" : value.toString());
            return this;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNovo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaCursos;
    private javax.swing.JTextField tfPesquisar;
    // End of variables declaration//GEN-END:variables
}
